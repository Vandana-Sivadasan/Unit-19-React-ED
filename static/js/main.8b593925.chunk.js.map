{"version":3,"sources":["logo.svg","components/datatable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","props","toggleSort","console","log","setState","sortOrder","state","employees","sort","a","b","id","handleStateChange","property","showName","showPosition","showId","name","position","bind","className","style","textAlign","onClick","this","map","employee","display","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,mKC8J5BC,G,wDA1Jb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA4CRC,WAAa,WACXC,QAAQC,IAAI,kCACZ,EAAKC,SAAS,CAAEC,WAAY,EAAKC,MAAMD,YAEvC,IAAIE,EAAY,EAAKD,MAAMC,UAGzBA,GAD2B,IAAzB,EAAKD,MAAMD,UACDE,EAAUC,MAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAEE,GAAKD,EAAEC,MAEjDJ,EAAUC,MAAK,SAAUC,EAAGC,GAAK,OAAOA,EAAEC,GAAKF,EAAEE,MAI/D,EAAKP,SAAS,CAAEG,UAAWA,KA1DV,EAkEnBK,kBAAoB,SAACC,GACF,SAAbA,EACF,EAAKT,SAAS,CAAEU,UAAW,EAAKR,MAAMQ,WAChB,aAAbD,EACT,EAAKT,SAAS,CAAEW,cAAe,EAAKT,MAAMS,eACpB,OAAbF,GACT,EAAKT,SAAS,CAAEY,QAAS,EAAKV,MAAMU,UAtEtC,EAAKV,MAAQ,CACXQ,UAAU,EACVC,cAAc,EACdC,QAAQ,EACRX,WAAW,EACXE,UAAW,CACT,CACEU,KAAM,MACNC,SAAU,WACVP,GAAI,aAEN,CACEM,KAAM,UACNC,SAAU,oBACVP,GAAI,YAEN,CACEM,KAAM,MACNC,SAAU,UACVP,GAAI,cAEN,CACEM,KAAM,QACNC,SAAU,UACVP,GAAI,eAEN,CACEM,KAAM,OACNC,SAAU,UACVP,GAAI,kBAKV,EAAKC,kBAAoB,EAAKA,kBAAkBO,KAAvB,gBApCR,E,qDA4ET,IAAD,OA+BP,OACE,6BACE,6BACE,uBAAGC,UAAU,cAAcC,MAAO,CAAEC,UAAU,aAGhD,yBAAKF,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UAAf,QAGA,yBAAKA,UAAU,UAAf,YAGA,yBAAKA,UAAU,UAAf,QAMF,4BAAQG,QAAS,kBAAM,EAAKX,kBAAkB,UAA9C,QACA,4BAAQW,QAAS,kBAAM,EAAKX,kBAAkB,cAA9C,YACA,4BAAQW,QAAS,kBAAM,EAAKX,kBAAkB,QAA9C,MACA,6BACA,4BAAQW,QAAS,kBAAM,EAAKtB,eAA5B,uBAGA,+BACE,4BACE,8CAIDuB,KAAKlB,MAAMC,UAAUkB,KAAI,SAACC,GAAD,OAExB,4BACE,wBAAIL,MAAO,CAAEM,QAAU,EAAKrB,MAAMQ,SAAX,iBAA4CY,EAAST,MAC5E,wBAAII,MAAO,CAAEM,QAAU,EAAKrB,MAAMS,aAAX,iBAAgDW,EAASR,UAChF,wBAAIG,MAAO,CAAEM,QAAU,EAAKrB,MAAMU,OAAX,iBAA0CU,EAASf,c,GAlJpEiB,IAAMC,YCWbC,MATf,WACE,OACA,6BACE,kDACA,kBAAC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.8b593925.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./datatable.css\"\r\n\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showName: true,\r\n      showPosition: true,\r\n      showId: true,\r\n      sortOrder: false,\r\n      employees: [\r\n        {\r\n          name: \"Bob\",\r\n          position: \"Engineer\",\r\n          id: \"319837937\"\r\n        },\r\n        {\r\n          name: \"Vandana\",\r\n          position: \"Software Engineer\",\r\n          id: \"26837638\"\r\n        },\r\n        {\r\n          name: \"Tom\",\r\n          position: \"Manager\",\r\n          id: \"5671878373\"\r\n        },\r\n        {\r\n          name: \"Sarah\",\r\n          position: \"Manager\",\r\n          id: \"93261878373\"\r\n        },\r\n        {\r\n          name: \"Jill\",\r\n          position: \"Manager\",\r\n          id: \"722381878373\"\r\n        },\r\n      ],\r\n    };\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleStateChange = this.handleStateChange.bind(this);\r\n    //this.sortEmployees = this.sortEmployees.bind(this);\r\n  }\r\n\r\n  //Create state to manage sorting ASC or DSC\r\n  //Create state to manage sorted array of employees\r\n  //Create function to handle sorting of employees\r\n  //Create button to call the sort function\r\n\r\n  toggleSort = () => {\r\n    console.log(\"Toggle Sort Function Called!!!\");\r\n    this.setState({ sortOrder: !this.state.sortOrder });\r\n\r\n    let employees = this.state.employees;\r\n\r\n    if (this.state.sortOrder === false) {\r\n      employees = employees.sort(function (a, b) { return a.id - b.id });\r\n    } else {\r\n      employees = employees.sort(function (a, b) { return b.id - a.id });\r\n    }\r\n\r\n\r\n    this.setState({ employees: employees })\r\n  }\r\n\r\n\r\n  //Function for updating sort order of employees\r\n  // ASC or DSC\r\n\r\n\r\n  handleStateChange = (property) => {\r\n    if (property === \"name\") {\r\n      this.setState({ showName: !this.state.showName });\r\n    } else if (property === \"position\") {\r\n      this.setState({ showPosition: !this.state.showPosition });\r\n    } else if (property === \"id\") {\r\n      this.setState({ showId: !this.state.showId });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const employeedata = [\r\n      {\r\n        name: \"Bob\",\r\n        position: \"Engineer\",\r\n        id: \"19837937\"\r\n      },\r\n      {\r\n        name: \"Vandana\",\r\n        position: \"Software Engineer\",\r\n        id: \"26837638\"\r\n      },\r\n\r\n      {\r\n        name: \"Tom\",\r\n        position: \"Manager\",\r\n        id: \"3y78373\"\r\n      },\r\n      {\r\n        name: \"Sarah\",\r\n        position: \"Manager\",\r\n        id: \"3y78373\"\r\n      },\r\n      {\r\n        name: \"Jill\",\r\n        position: \"Engineer\",\r\n        id: \"3y78373\"\r\n      },\r\n\r\n    ]\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <p className=\"Toggle Data\" style={{ textAlign: `center` }}></p>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm\">\r\n              Name\r\n            </div>\r\n            <div className=\"col-sm\">\r\n              Position\r\n            </div>\r\n            <div className=\"col-sm\">\r\n              ID\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n          <button onClick={() => this.handleStateChange(\"name\")}>Name</button>\r\n          <button onClick={() => this.handleStateChange(\"position\")}>Position</button>\r\n          <button onClick={() => this.handleStateChange(\"id\")}>ID</button>\r\n          <br />\r\n          <button onClick={() => this.toggleSort()}>Sort ID's ASC / DSC</button>\r\n\r\n\r\n          <table>\r\n            <tr>\r\n              <th>Employee Name</th>\r\n\r\n            </tr>\r\n\r\n            {this.state.employees.map((employee) =>\r\n              // filter name/position/id based on the state\r\n              <tr>\r\n                <td style={{ display: (this.state.showName ? `block` : `none`) }}>{employee.name}</td>\r\n                <td style={{ display: (this.state.showPosition ? `block` : `none`) }}>{employee.position}</td>\r\n                <td style={{ display: (this.state.showId ? `block` : `none`) }}>{employee.id}</td>\r\n              </tr>\r\n            )}\r\n          </table>\r\n        </div>\r\n        )\r\n  }; \r\n}\r\n\r\nexport default Counter;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './components/datatable';\n\nfunction App() {\n  return (\n  <div>\n    <h1>Employee Directory</h1>\n    <Table/>\n  </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}